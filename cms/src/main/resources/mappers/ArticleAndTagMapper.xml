<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="top.roud.roudblogcms.mapper.ArticleAndTagMapper">
    <insert id="insertArticle" parameterType="top.roud.roudblogcms.entity.Article">
        insert into rb_article(id,title,author,description,cover,postbody,publishtime,self,sort) values
        (#{id},#{title},#{author},#{description},#{cover},#{postbody},#{publishtime},#{self},#{sort})
    </insert>

    <insert id="insertTag" parameterType="top.roud.roudblogcms.entity.Tag">
        insert into rb_tag(id,tagname,description,addtime) values
        (#{id},#{tagname},#{description},#{addtime})
    </insert>

    <select id="getArticleById" parameterType="long" resultType="top.roud.roudblogcms.entity.Article">select id,title,author,description,cover,postbody,publishtime,viewsnum,commentsnum,self,sort from rb_article where id=#{id}</select>

    <select id="getTagById" parameterType="long" resultType="top.roud.roudblogcms.entity.Tag">select id,tagname,description,addtime from rb_tag where id=#{id}
    Â </select>

    <select id="getTagByName" parameterType="String" resultType="top.roud.roudblogcms.entity.Tag">select id,tagname,description,addtime from rb_tag where tagname=#{name}</select>

    <select id="getAllTags" resultType="top.roud.roudblogcms.entity.Tag">select id,tagname,description,addtime from rb_tag</select>

    <insert id="insertArticleAndTag">insert into rb_article_tag(id, article_id, tag_id) values (#{param1},#{param2},#{param3})</insert>

    <resultMap id="ArticleResult" type="top.roud.roudblogcms.entity.Article">
        <id property="id" column="aid"/>
        <result property="title" column="title"/>
        <result property="author" column="author"/>
        <result property="description" column="description"/>
        <result property="cover" column="cover"/>
        <result property="postbody" column="postbody"/>
        <result property="publishtime" column="publishtime"/>
        <result property="viewsnum" column="viewsnum"/>
        <result property="commentsnum" column="commentsnum"/>
        <result property="self" column="self"/>
    </resultMap>

    <resultMap id="TagResult" type="top.roud.roudblogcms.entity.Tag">
        <id property="id" column="tid"/>
        <result property="tagname" column="tagname"/>
        <result property="description" column="description"/>
        <result property="addtime" column="addtime"/>
    </resultMap>

    <resultMap id="ArticleResultWithTag" type="top.roud.roudblogcms.entity.Article" extends="ArticleResult">
        <collection property="tags" resultMap="TagResult"></collection>
    </resultMap>

    <resultMap id="TagsResult" type="top.roud.roudblogcms.entity.Tag" extends="TagResult">
        <collection property="articles" resultMap="ArticleResult"></collection>
    </resultMap>

    <select id="getTagsPage" resultType="List" resultMap="TagsResult">
        select rt.id as tid,rt.tagname,rt.description,rt.addtime,rat.article_id as aid FROM rb_tag rt LEFT JOIN rb_article_tag rat on rat.tag_id=rt.id <where><if test="search!=null">and rt.tagname like "%"#{search}"%"</if></where> <if test="pagecount>0">limit #{pagestart},#{pagecount}</if>
    </select>

    <select id="selectAllArticleIdByTagId" resultType="long">
        select article_id from rb_article_tag  where tag_id = #{tagId}
    </select>

    <update id="updateTagnameById" parameterType="top.roud.roudblogcms.entity.Tag">
        update rb_tag
        <set>
            <if test="tagname != null">
                tagname=#{tagname},
            </if>
            <if test="description != null">
                description=#{description},
            </if>
        </set>
        where id=#{id}
    </update>

    <select id="getArticleByIdWithTag" parameterType="long" resultMap="ArticleResultWithTag">
        select a.id as aid,a.title,a.author,a.description,a.cover,a.postbody,a.publishtime,a.viewsnum,a.commentsnum,a.self,a.sort
        t.id as tid,t.tagname,t.description,t.addtime
        from rb_article a,
        rb_tag t,
        rb_article_tag at
        where a.id=#{id} and a.id=at.article_id and t.id=at.tag_id
    </select>
    <select id="getAllArticleWithTag" resultMap="ArticleResultWithTag">
        select a.id as aid,a.title,a.author,a.description,a.cover,a.postbody,a.publishtime,a.viewsnum,a.commentsnum,a.self,a.sort
        t.id as tid,t.tagname,t.description,t.addtime
        from rb_article a,
        rb_tag t,
        rb_article_tag at
        where a.id=at.article_id and t.id=at.tag_id order by a.id desc
    </select>

    <select id="selectPage" resultType="top.roud.roudblogcms.entity.Article">
        select id,title,author,description,cover,postbody,publishtime,viewsnum,commentsnum,self,sort from rb_article ${ew.customSqlSegment} order by id desc
    </select>

    <select id="selectPageWithValidateCode" resultType="top.roud.roudblogcms.entity.ArticleWithValidateCode">
        select ra.id,ra.title,ra.author,ra.description,ra.cover,ra.postbody,ra.publishtime,ra.viewsnum,ra.commentsnum,ra.self,ra.sort,sa.validateCode from rb_article ra
            LEFT OUTER JOIN rb_selfarticle sa on ra.id=sa.articleId and ra.self=1 ${ew.customSqlSegment} order by id desc
    </select>

    <select id="selectPageWithoutBody" resultType="top.roud.roudblogcms.entity.Article">
        select id,title,author,description,cover,publishtime,viewsnum,commentsnum,self,sort from rb_article ${ew.customSqlSegment} order by id desc
    </select>

    <select id="selectPageByTag" resultType="top.roud.roudblogcms.entity.Article">
        select id,title,author,description,cover,postbody,publishtime,viewsnum,commentsnum,self,sort from rb_article ra where exists (select distinct rat.article_id from rb_article_tag rat where exists (select rt.id from rb_tag rt where tagname like "%"#{tagname}"%" and rat.tag_id=rt.id) and rat.article_id=ra.id)  order by ra.id desc
        <if test="pagecount>0">
            limit #{pagestart},#{pagecount}
        </if>
    </select>

    <delete id="delTagById" parameterType="long">
        DELETE from rb_tag  WHERE id=#{id}
    </delete>

    <select id="selectPageByTagWithoutBody" resultType="top.roud.roudblogcms.entity.Article">
        select id,title,author,description,cover,publishtime,viewsnum,commentsnum,self,sort from rb_article ra where exists (select distinct rat.article_id from rb_article_tag rat where exists (select rt.id from rb_tag rt where tagname like "%"#{tagname}"%" and rat.tag_id=rt.id) and rat.article_id=ra.id)  order by ra.id desc
        <if test="pagecount>0">
            limit #{pagestart},#{pagecount}
        </if>
    </select>

    <select id="getTagByArticleId" parameterType="long" resultType="top.roud.roudblogcms.entity.Tag">
        select id,tagname,description,addtime from rb_tag t where exists (select tag_id from rb_article_tag where article_id=#{id} and tag_id=t.id)
    </select>

    <delete id="delArticleWithTag" parameterType="long">
        DELETE rb_article,rb_article_tag from rb_article LEFT JOIN rb_article_tag ON rb_article.id=rb_article_tag.article_id WHERE rb_article.id=#{id}
    </delete>

    <update id="updateViewsnumAndCommentsnumByArticleId">
        update rb_article
        <set>
            viewsnum=#{viewsnum},commentsnum=#{commentsnum}
        </set>
        where id=#{id}
    </update>

    <update id="updateViewsnumByArticleId">
        update rb_article
        <set>
            viewsnum=#{viewsnum}
        </set>
        where id=#{id}
    </update>

    <update id="updateCommentsnumByArticleId">
        update rb_article
        <set>
            commentsnum=#{commentsnum}
        </set>
        where id=#{id}
    </update>
</mapper>