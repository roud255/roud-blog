<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="top.roud.roudblogcms.mapper.ArticleAndCommentMapper">

    <resultMap id="CommentWithSubResult" type="top.roud.roudblogcms.entity.Comment">
        <id property="id" column="id"/>
        <result property="content" column="content"/>
        <result property="opTime" column="op_time"/>
        <result property="articleId" column="article_id"/>
        <result property="parentId" column="parent_id"/>
        <result property="fromName" column="from_name"/>
        <result property="toName" column="to_name"/>
        <result property="headimg" column="headimg"/>
        <result property="motto" column="motto"/>
        <result property="sex" column="sex"/>
        <result property="email" column="email"/>
        <result property="address" column="address"/>
        <collection property="childComments" resultMap="CommentResult"/>
    </resultMap>
    <resultMap id="CommentResult" type="top.roud.roudblogcms.entity.Comment">
        <id property="id" column="sub_id"/>
        <result property="content" column="sub_content"/>
        <result property="opTime" column="sub_op_time"/>
        <result property="articleId" column="sub_article_id"/>
        <result property="parentId" column="sub_parent_id"/>
        <result property="fromName" column="sub_from_name"/>
        <result property="toName" column="sub_to_name"/>
        <result property="headimg" column="sub_headimg"/>
        <result property="email" column="sub_email"/>
        <result property="motto" column="sub_motto"/>
        <result property="sex" column="sub_sex"/>
        <result property="address" column="sub_address"/>
    </resultMap>

    <insert id="insertComment" parameterType="top.roud.roudblogcms.entity.Comment">
        insert into rb_comment(id, content, op_time, from_name, parent_id, to_name, article_id, headimg, sex, email, motto, address) values (#{id}, #{content},#{opTime}, #{fromName}, #{parentId}, #{toName}, #{articleId}, #{headimg},#{sex}, #{email}, #{motto}, #{address});
    </insert>

    <select id="findAllCommentsByArticle" resultType="List" resultMap="CommentWithSubResult" parameterType="Long">
        select
            id, op_time,content,from_name,to_name,parent_id,article_id,headimg,sex,email,motto,address,sub_id, sub_op_time,sub_content,sub_from_name,sub_to_name,sub_parent_id,sub_article_id,sub_headimg,sub_sex,sub_email,sub_motto,sub_address
        from
            (select
                 c.id id,c.op_time,c.content,c.from_name,c.to_name, c.parent_id, c.article_id,c.headimg,c.sex,c.email,c.motto,c.address,c1.id sub_id, c1.op_time sub_op_time,c1.content sub_content,c1.from_name sub_from_name,c1.to_name sub_to_name, c1.parent_id sub_parent_id, c1.article_id sub_article_id,c1.headimg sub_headimg,c1.sex sub_sex,c1.email sub_email,c1.motto sub_motto,c1.address sub_address
             from
                 rb_comment c
                     LEFT OUTER JOIN
                 rb_comment c1
                 on
                     c.id=c1.parent_id) c
        where
            c.parent_id='-1'
          and
            c.article_id=#{articleId}
        order by
            id desc
    </select>

    <select id="findArticleIdById" parameterType="long" resultType="long">
        select article_id from rb_comment where id=#{id}
    </select>

    <delete id="delById" parameterType="long">
        delete from rb_comment where id=#{id}
    </delete>

    <delete id="delByArticleId" parameterType="long">
        delete from rb_comment where article_id=#{articleId}
    </delete>

    <select id="selectCommentsnumByArticleId" resultType="int">
        select count(*) from rb_comment
        <where>
            <if test="id != null">
                article_id=#{id}
            </if>
        </where>
    </select>
</mapper>